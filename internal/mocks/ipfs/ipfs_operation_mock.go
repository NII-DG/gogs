// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Myrepository\nii_dg_gin\internal\ipfs\ipfs_operation.go

// Package mock_ipfs is a generated GoMock package.
package mock_ipfs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFIpfsOperation is a mock of IFIpfsOperation interface.
type MockIFIpfsOperation struct {
	ctrl     *gomock.Controller
	recorder *MockIFIpfsOperationMockRecorder
}

// MockIFIpfsOperationMockRecorder is the mock recorder for MockIFIpfsOperation.
type MockIFIpfsOperationMockRecorder struct {
	mock *MockIFIpfsOperation
}

// NewMockIFIpfsOperation creates a new mock instance.
func NewMockIFIpfsOperation(ctrl *gomock.Controller) *MockIFIpfsOperation {
	mock := &MockIFIpfsOperation{ctrl: ctrl}
	mock.recorder = &MockIFIpfsOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFIpfsOperation) EXPECT() *MockIFIpfsOperationMockRecorder {
	return m.recorder
}

// FilesCopy mocks base method.
func (m *MockIFIpfsOperation) FilesCopy(contentAddress, fullRepoFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesCopy", contentAddress, fullRepoFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesCopy indicates an expected call of FilesCopy.
func (mr *MockIFIpfsOperationMockRecorder) FilesCopy(contentAddress, fullRepoFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesCopy", reflect.TypeOf((*MockIFIpfsOperation)(nil).FilesCopy), contentAddress, fullRepoFilePath)
}

// FilesIs mocks base method.
func (m *MockIFIpfsOperation) FilesIs(folderPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesIs", folderPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesIs indicates an expected call of FilesIs.
func (mr *MockIFIpfsOperationMockRecorder) FilesIs(folderPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesIs", reflect.TypeOf((*MockIFIpfsOperation)(nil).FilesIs), folderPath)
}

// FilesRemove mocks base method.
func (m *MockIFIpfsOperation) FilesRemove(folderPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesRemove", folderPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesRemove indicates an expected call of FilesRemove.
func (mr *MockIFIpfsOperationMockRecorder) FilesRemove(folderPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesRemove", reflect.TypeOf((*MockIFIpfsOperation)(nil).FilesRemove), folderPath)
}

// FilesStatus mocks base method.
func (m *MockIFIpfsOperation) FilesStatus(folderPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesStatus", folderPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesStatus indicates an expected call of FilesStatus.
func (mr *MockIFIpfsOperationMockRecorder) FilesStatus(folderPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesStatus", reflect.TypeOf((*MockIFIpfsOperation)(nil).FilesStatus), folderPath)
}
