// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Myrepository\NII-DG Repository\gogs\internal\fileutil\fileutil.go

// Package mock_fileutil is a generated GoMock package.
package mock_fileutil

import (
	fs "io/fs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFFileUtil is a mock of IFFileUtil interface.
type MockIFFileUtil struct {
	ctrl     *gomock.Controller
	recorder *MockIFFileUtilMockRecorder
}

// MockIFFileUtilMockRecorder is the mock recorder for MockIFFileUtil.
type MockIFFileUtilMockRecorder struct {
	mock *MockIFFileUtil
}

// NewMockIFFileUtil creates a new mock instance.
func NewMockIFFileUtil(ctrl *gomock.Controller) *MockIFFileUtil {
	mock := &MockIFFileUtil{ctrl: ctrl}
	mock.recorder = &MockIFFileUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFFileUtil) EXPECT() *MockIFFileUtilMockRecorder {
	return m.recorder
}

// GetFileBypath mocks base method.
func (m *MockIFFileUtil) GetFileBypath(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileBypath", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileBypath indicates an expected call of GetFileBypath.
func (mr *MockIFFileUtilMockRecorder) GetFileBypath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileBypath", reflect.TypeOf((*MockIFFileUtil)(nil).GetFileBypath), path)
}

// ReadDirBypath mocks base method.
func (m *MockIFFileUtil) ReadDirBypath(path string) ([]fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDirBypath", path)
	ret0, _ := ret[0].([]fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDirBypath indicates an expected call of ReadDirBypath.
func (mr *MockIFFileUtilMockRecorder) ReadDirBypath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDirBypath", reflect.TypeOf((*MockIFFileUtil)(nil).ReadDirBypath), path)
}
