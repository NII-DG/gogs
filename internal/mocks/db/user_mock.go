// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/user.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	git "github.com/gogs/git-module"
	gomock "github.com/golang/mock/gomock"
	db "github.com/ivis-yoshida/gogs/internal/db"
)

// MockAbstructDbUser is a mock of AbstructDbUser interface.
type MockAbstructDbUser struct {
	ctrl     *gomock.Controller
	recorder *MockAbstructDbUserMockRecorder
}

// MockAbstructDbUserMockRecorder is the mock recorder for MockAbstructDbUser.
type MockAbstructDbUserMockRecorder struct {
	mock *MockAbstructDbUser
}

// NewMockAbstructDbUser creates a new mock instance.
func NewMockAbstructDbUser(ctrl *gomock.Controller) *MockAbstructDbUser {
	mock := &MockAbstructDbUser{ctrl: ctrl}
	mock.recorder = &MockAbstructDbUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstructDbUser) EXPECT() *MockAbstructDbUserMockRecorder {
	return m.recorder
}

// GetEmail mocks base method.
func (m *MockAbstructDbUser) GetEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockAbstructDbUserMockRecorder) GetEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockAbstructDbUser)(nil).GetEmail))
}

// GetId mocks base method.
func (m *MockAbstructDbUser) GetId() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockAbstructDbUserMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockAbstructDbUser)(nil).GetId))
}

// GetName mocks base method.
func (m *MockAbstructDbUser) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockAbstructDbUserMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockAbstructDbUser)(nil).GetName))
}

// GetType mocks base method.
func (m *MockAbstructDbUser) GetType() db.UserType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(db.UserType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockAbstructDbUserMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockAbstructDbUser)(nil).GetType))
}

// NewGitSig mocks base method.
func (m *MockAbstructDbUser) NewGitSig() *git.Signature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGitSig")
	ret0, _ := ret[0].(*git.Signature)
	return ret0
}

// NewGitSig indicates an expected call of NewGitSig.
func (mr *MockAbstructDbUserMockRecorder) NewGitSig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGitSig", reflect.TypeOf((*MockAbstructDbUser)(nil).NewGitSig))
}
