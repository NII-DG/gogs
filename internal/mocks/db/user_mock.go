// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/user.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/ivis-yoshida/gogs/internal/db"
)

// MockAbstructDbUser is a mock of AbstructDbUser interface.
type MockAbstructDbUser struct {
	ctrl     *gomock.Controller
	recorder *MockAbstructDbUserMockRecorder
}

// MockAbstructDbUserMockRecorder is the mock recorder for MockAbstructDbUser.
type MockAbstructDbUserMockRecorder struct {
	mock *MockAbstructDbUser
}

// NewMockAbstructDbUser creates a new mock instance.
func NewMockAbstructDbUser(ctrl *gomock.Controller) *MockAbstructDbUser {
	mock := &MockAbstructDbUser{ctrl: ctrl}
	mock.recorder = &MockAbstructDbUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstructDbUser) EXPECT() *MockAbstructDbUserMockRecorder {
	return m.recorder
}

// GetType mocks base method.
func (m *MockAbstructDbUser) GetType() db.UserType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(db.UserType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockAbstructDbUserMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockAbstructDbUser)(nil).GetType))
}
