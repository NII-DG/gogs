// Code generated by MockGen. DO NOT EDIT.
// Source: ipfs_exec.go

// Package mock_ipfs is a generated GoMock package.
package mock_ipfs

import (
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIFIpfsCommand is a mock of IFIpfsCommand interface.
type MockIFIpfsCommand struct {
	ctrl     *gomock.Controller
	recorder *MockIFIpfsCommandMockRecorder
}

// MockIFIpfsCommandMockRecorder is the mock recorder for MockIFIpfsCommand.
type MockIFIpfsCommandMockRecorder struct {
	mock *MockIFIpfsCommand
}

// NewMockIFIpfsCommand creates a new mock instance.
func NewMockIFIpfsCommand(ctrl *gomock.Controller) *MockIFIpfsCommand {
	mock := &MockIFIpfsCommand{ctrl: ctrl}
	mock.recorder = &MockIFIpfsCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFIpfsCommand) EXPECT() *MockIFIpfsCommandMockRecorder {
	return m.recorder
}

// AddArgs mocks base method.
func (m *MockIFIpfsCommand) AddArgs(args ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddArgs", varargs...)
}

// AddArgs indicates an expected call of AddArgs.
func (mr *MockIFIpfsCommandMockRecorder) AddArgs(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArgs", reflect.TypeOf((*MockIFIpfsCommand)(nil).AddArgs), args...)
}

// AddEnvs mocks base method.
func (m *MockIFIpfsCommand) AddEnvs(envs ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range envs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddEnvs", varargs...)
}

// AddEnvs indicates an expected call of AddEnvs.
func (mr *MockIFIpfsCommandMockRecorder) AddEnvs(envs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvs", reflect.TypeOf((*MockIFIpfsCommand)(nil).AddEnvs), envs...)
}

// Run mocks base method.
func (m *MockIFIpfsCommand) Run() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockIFIpfsCommandMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIFIpfsCommand)(nil).Run))
}

// RunInDir mocks base method.
func (m *MockIFIpfsCommand) RunInDir(dir string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInDir", dir)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInDir indicates an expected call of RunInDir.
func (mr *MockIFIpfsCommandMockRecorder) RunInDir(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInDir", reflect.TypeOf((*MockIFIpfsCommand)(nil).RunInDir), dir)
}

// RunInDirPipelineWithTimeout mocks base method.
func (m *MockIFIpfsCommand) RunInDirPipelineWithTimeout(timeout time.Duration, stdout, stderr io.Writer, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInDirPipelineWithTimeout", timeout, stdout, stderr, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInDirPipelineWithTimeout indicates an expected call of RunInDirPipelineWithTimeout.
func (mr *MockIFIpfsCommandMockRecorder) RunInDirPipelineWithTimeout(timeout, stdout, stderr, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInDirPipelineWithTimeout", reflect.TypeOf((*MockIFIpfsCommand)(nil).RunInDirPipelineWithTimeout), timeout, stdout, stderr, dir)
}

// RunInDirWithTimeout mocks base method.
func (m *MockIFIpfsCommand) RunInDirWithTimeout(timeout time.Duration, dir string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInDirWithTimeout", timeout, dir)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInDirWithTimeout indicates an expected call of RunInDirWithTimeout.
func (mr *MockIFIpfsCommandMockRecorder) RunInDirWithTimeout(timeout, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInDirWithTimeout", reflect.TypeOf((*MockIFIpfsCommand)(nil).RunInDirWithTimeout), timeout, dir)
}

// RunWithTimeout mocks base method.
func (m *MockIFIpfsCommand) RunWithTimeout(timeout time.Duration) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithTimeout", timeout)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithTimeout indicates an expected call of RunWithTimeout.
func (mr *MockIFIpfsCommandMockRecorder) RunWithTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithTimeout", reflect.TypeOf((*MockIFIpfsCommand)(nil).RunWithTimeout), timeout)
}
