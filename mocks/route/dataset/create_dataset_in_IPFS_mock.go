// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Myrepository\nii_dg_gin\internal\route\dataset\create_dataset_in_IPFS.go

// Package mock_dataset is a generated GoMock package.
package mock_dataset

import (
	reflect "reflect"

	bcapi "github.com/NII-DG/gogs/internal/bcapi"
	db "github.com/NII-DG/gogs/internal/db"
	gomock "github.com/golang/mock/gomock"
)

// MockIFDatasetCreater is a mock of IFDatasetCreater interface.
type MockIFDatasetCreater struct {
	ctrl     *gomock.Controller
	recorder *MockIFDatasetCreaterMockRecorder
}

// MockIFDatasetCreaterMockRecorder is the mock recorder for MockIFDatasetCreater.
type MockIFDatasetCreaterMockRecorder struct {
	mock *MockIFDatasetCreater
}

// NewMockIFDatasetCreater creates a new mock instance.
func NewMockIFDatasetCreater(ctrl *gomock.Controller) *MockIFDatasetCreater {
	mock := &MockIFDatasetCreater{ctrl: ctrl}
	mock.recorder = &MockIFDatasetCreaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFDatasetCreater) EXPECT() *MockIFDatasetCreaterMockRecorder {
	return m.recorder
}

// GetDatasetAddress mocks base method.
func (m *MockIFDatasetCreater) GetDatasetAddress(datasetPath string, datasetData db.DatasetInfo) (bcapi.UploadDatasetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetAddress", datasetPath, datasetData)
	ret0, _ := ret[0].(bcapi.UploadDatasetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetAddress indicates an expected call of GetDatasetAddress.
func (mr *MockIFDatasetCreaterMockRecorder) GetDatasetAddress(datasetPath, datasetData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetAddress", reflect.TypeOf((*MockIFDatasetCreater)(nil).GetDatasetAddress), datasetPath, datasetData)
}

// createDatasetStructure mocks base method.
func (m *MockIFDatasetCreater) createDatasetStructure(contentList []db.ContentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createDatasetStructure", contentList)
	ret0, _ := ret[0].(error)
	return ret0
}

// createDatasetStructure indicates an expected call of createDatasetStructure.
func (mr *MockIFDatasetCreaterMockRecorder) createDatasetStructure(contentList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createDatasetStructure", reflect.TypeOf((*MockIFDatasetCreater)(nil).createDatasetStructure), contentList)
}

// getUploadDatasetInfo mocks base method.
func (m *MockIFDatasetCreater) getUploadDatasetInfo(datasetPath string) (bcapi.UploadDatasetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUploadDatasetInfo", datasetPath)
	ret0, _ := ret[0].(bcapi.UploadDatasetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUploadDatasetInfo indicates an expected call of getUploadDatasetInfo.
func (mr *MockIFDatasetCreaterMockRecorder) getUploadDatasetInfo(datasetPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUploadDatasetInfo", reflect.TypeOf((*MockIFDatasetCreater)(nil).getUploadDatasetInfo), datasetPath)
}

// isDatasetFolderOnIPFS mocks base method.
func (m *MockIFDatasetCreater) isDatasetFolderOnIPFS(datasetPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isDatasetFolderOnIPFS", datasetPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isDatasetFolderOnIPFS indicates an expected call of isDatasetFolderOnIPFS.
func (mr *MockIFDatasetCreaterMockRecorder) isDatasetFolderOnIPFS(datasetPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDatasetFolderOnIPFS", reflect.TypeOf((*MockIFDatasetCreater)(nil).isDatasetFolderOnIPFS), datasetPath)
}
